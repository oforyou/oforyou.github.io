<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[manacher找出最长回文串]]></title>
    <url>%2F2018%2F11%2F21%2Fmanacher%E6%89%BE%E5%87%BA%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[熟悉算法的可能知道manacher在线性时间能够找出最长回文串长度，但是要想找出最长回文串是谁，需要做一些改进，这时需要分奇偶讨论，枚举中心点。该题目来源于LeetCode 第五题 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class Solution &#123;public: string longestPalindrome(string s) &#123; if(s=="") return ""; int idl=0, idr=0, anslen=0; int *r=new int[s.length()+5]; memset(r, 0, sizeof r); int mx=0, mid=0; //odd for(int i=0; i&lt;s.length(); i++)&#123; r[i]=i&lt;mx ? min(r[2*mid-i], mx-i) : 1; while(i-r[i]&gt;=0 &amp;&amp; i+r[i]&lt;=s.length() &amp;&amp; s[i-r[i]]==s[i+r[i]])&#123; r[i]++; &#125; if(i+r[i]&gt;mx)&#123; mid=i; mx=i+r[i]; &#125; if(anslen&lt;2*r[i]-1)&#123; anslen=2*r[i]-1; idl=i-r[i]+1; idr=i+r[i]-1; &#125; &#125; memset(r, 0, sizeof r); mx=0, mid=0; //even for(int i=0; i&lt;s.length()-1; i++)&#123; r[i]=i&lt;mx? min(r[2*mid-i], mx-i) : 0; while(i-r[i]&gt;=0 &amp;&amp; i+r[i]+1&lt;s.length() &amp;&amp; s[i-r[i]]==s[i+r[i]+1]) r[i]++; if(i+r[i]&gt;mx)&#123; mid=i; mx=i+r[i]; &#125; if(anslen&lt;2*r[i])&#123; anslen=2*r[i]; idl=i-r[i]+1; idr=i+r[i]; &#125; &#125; string ans=s.substr(idl, anslen); return ans; &#125;&#125;; 传统的代码 12345678910111213141516171819202122char Ma[MAXN*2]；int Mp[MAXN*2];void MAnacher(char s[], int len)&#123; int l=0; Ma[l++]='$'; Ma[l++]='#'; for(int i=0; i&lt;len; i++)&#123; Ma[l++]=s[i]; Ma[l++]='#'; &#125; Ma[l]=0; int mx=0, id=0; for(int i=0; i&lt;l; i++)&#123; Mp[i]=mx&gt;i?min(Mp[2*id-i], mx-i):1; while(Ma[i+Mp[i]]==Ma[i-Mp[i]]) Mp[i]++; if(i+Mp[i]&gt;mx)&#123; mx=i+Mp[i]; id=i; &#125; &#125; //Mp[]中的最大值就是最长回文串的长度&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1055C]]></title>
    <url>%2F2018%2F11%2F12%2FCF1055C%2F</url>
    <content type="text"><![CDATA[题意： 给[l1,r1],d1,并且规定[l1,r1], [l1+d1, r1+d1]…[l1+k*d1, r1+k*d1]是happy区间，l2,r2,d2也如此，现在就是让求最长的连续区间，并且这个区间对1,2都是happy的 思路： 这个题一看就知道循环节，最小公倍数，但是直接暴力循环节超时，我们可以考虑这个式子 d1x+d2y=gcd(d1, d2) (mod最小公倍数)，我们知道，最大的答案是两区间较小者，所以我们应该让两区间左端点尽量重合，假如左端点相差dis，我们通过上面式子可以看出，我们可以调整x，y逼近dis 123456789101112131415161718192021222324252627282930#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=1e5+10;ll l1, l2, r1, r2, d1, d2;ll jiao(ll a1, ll b1, ll a2, ll b2)&#123; ll a3=max(a1, a2); ll b3=min(b1, b2); return max(0ll, b3-a3+1);&#125;int main()&#123; cin&gt;&gt;l1&gt;&gt;r1&gt;&gt;d1&gt;&gt;l2&gt;&gt;r2&gt;&gt;d2; ll gd=__gcd(d1, d2); if(l1&lt;l2) swap(l1, l2), swap(r1, r2); ll dis=l1-l2; ll bei=dis/gd; ll ans=0; ans=max(ans, jiao(l1, r1, l2+bei*gd, r2+bei*gd)); ans=max(ans, jiao(l1, r1, l2+bei*gd+gd, r2+bei*gd+gd)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>欧几里得算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.11.02晚]]></title>
    <url>%2F2018%2F11%2F02%2F2018-11-02%E6%99%9A%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>dairy</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ZOJ-3543不错的dp]]></title>
    <url>%2F2018%2F11%2F01%2FZOJ-3543%E4%B8%8D%E9%94%99%E7%9A%84dp%2F</url>
    <content type="text"><![CDATA[题意： 给长为n-1字符串，包括‘I’,’D’,’?’三个字符，含义分别是： ‘I’比前面的数大 ‘D’比前面的数小 ‘？’不受限制 问题是有多少1~n的全排列满足这个关系串。 思路： 感觉挺难想的。设dp[i][j]代表1~i的全排列，以j数字结尾，并且满足这个关系串的种类数。 那么对于长度为i+1，如果是字符‘D’ dp[i+1][j]=sum(dp[i][k]) k=j~i-1 因为我们已经保证了i-1是满足的，当我们添加j使长度变为i，并且也要满足，就相当于前面大于等于j的数都+1，这样就变成了1~i满足关系串的全排列 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int mo=1000000007;const int N=1e3+10;ll dp[N][N];ll sum[N];char s[N];int main()&#123; while(~scanf("%s", s+2))&#123; int n=strlen(s+2)+1; for(int i=1; i&lt;=n; i++) for(int j=1; j&lt;=n; j++) dp[i][j]=0; dp[1][1]=1; for(int i=2; i&lt;=n; i++)&#123; if(s[i]=='D')&#123; for(int j=i-1; j&gt;=1; j--) dp[i][j]=(dp[i][j+1]+dp[i-1][j])%mo; &#125; else if(s[i]=='I')&#123; for(int j=2; j&lt;=i; j++) dp[i][j]=(dp[i][j-1]+dp[i-1][j-1])%mo; &#125; else&#123; ll sum=0; for(int j=1; j&lt;i; j++) sum=(sum+dp[i-1][j])%mo; for(int j=1; j&lt;=i; j++) dp[i][j]=sum; &#125; &#125; ll sum=0; for(int i=1; i&lt;=n; i++) sum=(sum+dp[n][i])%mo; printf("%lld\n", sum); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>dp</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二维线段树模板]]></title>
    <url>%2F2018%2F10%2F31%2F%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[这个模板是根据HDU-4819编写的。功能是用二维线段树进行 二维点修改和区间查询最小者和最大值。 二维线段树的思想跟一维一样，只不过一维是二分二叉树，二维 是四分四叉树。具体实现看代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#include&lt;bits/stdc++.h&gt;using namespace std;const int LOGN = 10;const int MAXN = (1&lt;&lt;LOGN);const int MAXNODES = (3*(1&lt;&lt;(2*LOGN)) + 100);const int MAX_VAL = 0x3f3f3f3f;const int MIN_VAL = -0x3f3f3f3f;#define son(x) (p*4-2+x)//表示最大值，最小值信息的结构体struct dataInfo&#123; short posx, posy; int val; dataInfo()&#123; posx = posy = val = -1; &#125; dataInfo(short _posx, short _posy, int _val)&#123; posx=_posx; posy=_posy; val=_val; &#125;&#125;;//树的节点struct treeNode&#123; dataInfo maxv, minv; void reset()&#123; maxv = dataInfo(0, 0, INT_MIN); minv = dataInfo(0, 0, INT_MAX); &#125;&#125;nodes[MAXNODES];//得到节点的指针treeNode* getNode(int id)&#123; return &amp;nodes[id];&#125;//表示x、y的范围struct Interval&#123; int l, r; Interval()&#123;&#125; Interval(int _l, int _r)&#123; l=_l; r=_r; &#125; int mid()&#123; return (l+r)&gt;&gt;1; &#125; int len()&#123; return r-l+1; &#125; Interval left()&#123; return Interval(l, mid()); &#125; Interval right()&#123; return Interval(mid()+1, r); &#125; bool isIntersectWith(Interval&amp; tarI)&#123;//判断两区间是否相交 return !(l&gt;tarI.r || r&lt;tarI.l); &#125; bool isInclude(Interval&amp; tarI)&#123;//是否包含tarI区间 return l&lt;=tarI.l &amp;&amp; tarI.r&lt;=r; &#125; bool in(int v)&#123;//是否包含v点 return l&lt;=v &amp;&amp; v&lt;=r; &#125;&#125;;//建树void build_segtree(int p, Interval xI, Interval yI)&#123; if(xI.len()&lt;=0 || yI.len()&lt;=0)&#123; return; &#125; treeNode* now=getNode(p); now-&gt;reset(); if(xI.len() == 1 &amp;&amp; yI.len()==1)&#123; return; &#125; //分别为左上、右上、左下、右下的矩形区间 build_segtree( son(0), xI.left(), yI.left() ); build_segtree( son(1), xI.right(), yI.left() ); build_segtree( son(2), xI.left(), yI.right() ); build_segtree( son(3), xI.right(), yI.right() );&#125;//点修改bool insert_segtree(int p, Interval xI, Interval yI, int x, int y, int val)&#123; if(xI.len() &lt;= 0 || yI.len()&lt;=0)&#123; return false; &#125; if(!xI.in(x) || !yI.in(y) )&#123; return true; &#125; treeNode *now = getNode(p); if(xI.len()==1 &amp;&amp; yI.len()==1)&#123; now-&gt;maxv=now-&gt;minv =dataInfo(x, y, val); return true; &#125; bool isvalid[4]; isvalid[0]=insert_segtree( son(0), xI.left(), yI.left(), x, y, val); isvalid[1]=insert_segtree( son(1), xI.right(), yI.left(), x, y, val); isvalid[2]=insert_segtree( son(2), xI.left(), yI.right(), x, y, val); isvalid[3]=insert_segtree( son(3), xI.right(), yI.right(), x, y, val); now-&gt;reset(); for(int i=0; i&lt;4; i++)&#123; if(!isvalid[i]) continue;//只对有效的区间修改 treeNode *sonNode =getNode(son(i)); now-&gt;maxv=sonNode-&gt;maxv.val &gt; now-&gt;maxv.val?sonNode-&gt;maxv : now-&gt;maxv; now-&gt;minv=sonNode-&gt;minv.val &lt; now-&gt;minv.val?sonNode-&gt;minv : now-&gt;minv; &#125; return true;&#125;void query_segtree(int p, Interval xI, Interval yI, Interval tarXI, Interval tarYI, treeNode&amp; ans)&#123; if(xI.len()&lt;=0 || yI.len()&lt;=0)&#123; return; &#125; if(!tarXI.isIntersectWith(xI) || !tarYI.isIntersectWith(yI) )&#123; return; &#125; treeNode *now=getNode(p); if(ans.maxv.val&gt;=now-&gt;maxv.val &amp;&amp; ans.minv.val&lt;=now-&gt;minv.val)&#123; return; &#125; if(tarXI.isInclude(xI) &amp;&amp; tarYI.isInclude(yI))&#123; ans.maxv.val=max(ans.maxv.val, now-&gt;maxv.val); ans.minv.val=min(ans.minv.val, now-&gt;minv.val); return; &#125; query_segtree( son(0), xI.left(), yI.left(), tarXI, tarYI, ans ); query_segtree( son(1), xI.right(), yI.left(), tarXI, tarYI, ans ); query_segtree( son(2), xI.left(), yI.right(), tarXI, tarYI, ans ); query_segtree( son(3), xI.right(), yI.right(), tarXI, tarYI, ans );&#125;int main()&#123; int T, n, tmp, cas=0; scanf("%d", &amp;T); while(T--)&#123; scanf("%d", &amp;n); build_segtree(1, Interval(1, n), Interval(1, n)); int tmp; for(int i=1; i&lt;=n; i++)&#123; for(int j=1; j&lt;=n; j++)&#123; scanf("%d", &amp;tmp); insert_segtree(1, Interval(1, n), Interval(1, n), i, j, tmp); &#125; &#125; int m, x, y, sz; scanf("%d", &amp;m); printf("Case #%d:\n", ++cas); while(m--)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;sz); Interval XI, YI; XI.l=max(1, x-sz/2), XI.r=min(n, x+sz/2); YI.l=max(1, y-sz/2), YI.r=min(n, y+sz/2); treeNode ans; ans.reset(); query_segtree( 1, Interval(1, n), Interval(1, n), XI, YI, ans); printf("%d\n", (ans.maxv.val+ans.minv.val)/2); insert_segtree(1, Interval(1, n), Interval(1, n), x, y, (ans.maxv.val+ans.minv.val)/2); &#125; &#125; return 0;&#125; 上面是借鉴的网上的写法，因为他将各种都进行了封装，所以比较好理解。自己感觉竞赛还是简练一点比较好，下面代码是自己修改的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140#include&lt;bits/stdc++.h&gt;using namespace std;const int N=810;#define son(x) (rt*4-2+x)struct node&#123; int mx, mn; void reset()&#123; mx=INT_MIN; mn=INT_MAX; &#125;&#125;tree[(N&lt;&lt;2)*(N&lt;&lt;2)];void build(int rt, int xl, int xr, int yl, int yr)&#123; if(xl&gt;xr || yl&gt;yr) return; tree[rt].reset(); if(xl==xr&amp;&amp;yl==yr) return; int midx=(xl+xr)&gt;&gt;1, midy=(yl+yr)&gt;&gt;1; build(son(0), xl, midx, yl, midy); build(son(1), xl, midx, midy+1, yr); build(son(2), midx+1, xr, yl, midy); build(son(3), midx+1, xr, midy+1, yr);&#125;//push_up完全可以放在跟新里面 写起来更简洁void push_up(int rt, int xl, int xr, int yl, int yr)&#123; node&amp; now=tree[rt]; now.reset(); now.mx=max(now.mx, tree[son(0)].mx); now.mn=min(now.mn, tree[son(0)].mn); if(yl&lt;yr)&#123; now.mx=max(now.mx, tree[son(1)].mx); now.mn=min(now.mn, tree[son(1)].mn); &#125; if(xl&lt;xr)&#123; now.mx=max(now.mx, tree[son(2)].mx); now.mn=min(now.mn, tree[son(2)].mn); &#125; if(xl&lt;xr &amp;&amp; yl&lt;yr)&#123; now.mx=max(now.mx, tree[son(3)].mx); now.mn=min(now.mn, tree[son(3)].mn); &#125;&#125;//point updatevoid upd(int rt, int xl, int xr, int yl, int yr, int x, int y, int val)&#123; if(xl&gt;xr || yl&gt;yr) return; node&amp; now=tree[rt]; if(xl==xr&amp;&amp;xl==x &amp;&amp; yl==yr&amp;&amp;yl==y)&#123; now.mx=val; now.mn=val; return; &#125; int midx=(xl+xr)&gt;&gt;1, midy=(yl+yr)&gt;&gt;1; if(x&lt;=midx &amp;&amp; y&lt;=midy)&#123; upd(son(0), xl, midx, yl, midy, x, y, val); &#125; else if(x&lt;=midx &amp;&amp; y&gt;midy)&#123; upd(son(1), xl, midx, midy+1, yr, x, y, val); &#125; else if(x&gt;midx &amp;&amp; y&lt;=midy)&#123; upd(son(2), midx+1, xr, yl, midy, x, y, val); &#125; else&#123; upd(son(3), midx+1, xr, midy+1, yr, x, y, val); &#125; push_up(rt, xl, xr, yl, yr);&#125;//interval querynode query(int rt, int xl, int xr, int yl, int yr, int qxl, int qxr, int qyl, int qyr)&#123; node tmp; tmp.reset(); if(xl&gt;xr || yl&gt;yr) return tmp; if(xl&gt;qxr || qxl&gt;xr || yl&gt;qyr || qyl&gt;yr) return tmp; if(qxl&lt;=xl &amp;&amp; xr&lt;=qxr &amp;&amp; qyl&lt;=yl &amp;&amp; yr&lt;=qyr)&#123; return tree[rt]; &#125; int midx=(xl+xr)&gt;&gt;1, midy=(yl+yr)&gt;&gt;1; node ret; ret.reset(); if(qxl&lt;=midx &amp;&amp; qyl&lt;=midy)&#123; tmp=query(son(0), xl, midx, yl, midy, qxl, qxr, qyl, qyr); ret.mx=max(ret.mx, tmp.mx); ret.mn=min(ret.mn, tmp.mn); &#125; if(qxl&lt;=midx &amp;&amp; qyr&gt;midy)&#123; tmp=query(son(1), xl, midx, midy+1, yr, qxl, qxr, qyl, qyr); ret.mx=max(ret.mx, tmp.mx); ret.mn=min(ret.mn, tmp.mn); &#125; if(qxr&gt;midx &amp;&amp; qyl&lt;=midy)&#123; tmp=query(son(2), midx+1, xr, yl, midy, qxl, qxr, qyl, qyr); ret.mx=max(ret.mx, tmp.mx); ret.mn=min(ret.mn, tmp.mn); &#125; if(qxr&gt;midx &amp;&amp; qyr&gt;midy)&#123; tmp=query(son(3), midx+1, xr, midy+1, yr, qxl, qxr, qyl, qyr); ret.mx=max(ret.mx, tmp.mx); ret.mn=min(ret.mn, tmp.mn); &#125; return ret;&#125;int main()&#123; int T, n, cas=0; scanf("%d", &amp;T); while(T--)&#123; scanf("%d", &amp;n); build(1, 1, n, 1, n); int tmp; for(int i=1; i&lt;=n; i++)&#123; for(int j=1; j&lt;=n; j++)&#123; scanf("%d", &amp;tmp); upd(1, 1, n, 1, n, i, j, tmp); &#125; &#125; int m, x, y, sz; scanf("%d", &amp;m); printf("Case #%d:\n", ++cas); while(m--)&#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;sz); int qxl=max(1, x-sz/2), qxr=min(n, x+sz/2); int qyl=max(1, y-sz/2), qyr=min(n, y+sz/2); node ans; ans=query(1, 1, n, 1, n, qxl, qxr, qyl, qyr); printf("%d\n", (ans.mn + ans.mx)&gt;&gt;1); upd(1, 1, n, 1, n, x, y, (ans.mn+ans.mx)/2); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二维线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU 4821 String --hash+map]]></title>
    <url>%2F2018%2F10%2F30%2FHDU-4821-String-hash-map%2F</url>
    <content type="text"><![CDATA[题意： 给上限为1e5的字符串，找出有多少长度为M*L的子串，并且该子串的M个长度为L的子串各不相同。 思路： 开始认为子串不想同的定义是每个位置的字符不相同，感觉说的有歧义。 two strings are considered as “diversified” if they don’t have the same character for every position. 最暴力的算法就是枚举所有长度为M*L的子串，判断hash子串是否合格。但是枚举子串是n^2的时间复杂度。可以仔细想一下，我们可以从下标1~L枚举起点，然后以这个起点用指针每次跳L步长。然后跟尺取原理似的一直保持map里的元素是M个。这样时间复杂度是O（L*n/L）,即O(n)。为什么用map去重而不用set，原因就是对于相同的我们记住它出现了几次，只有他出现的次数==0的时候才将它删去。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;using namespace std;typedef unsigned long long ull;const int N=1e5+10;ull base[N], _hash[N], mul=37;char str[N];inline ull hash_str(int l, int r)&#123; return _hash[r]-_hash[l-1]*base[r-l+1];&#125;int main()&#123; int M, L; while(~scanf("%d%d", &amp;M, &amp;L))&#123; scanf("%s", str+1); int len=strlen(str+1); base[0]=1; _hash[0]=0; for(int i=1; i&lt;=len; i++)&#123; base[i]=base[i-1]*mul; _hash[i]=_hash[i-1]*mul+str[i]; &#125; map&lt;ull, int&gt; mp; int ans=0; for(int i=1; i&lt;=L; i++)&#123;//enum start point mp.clear(); for(int j=i; i+M*L-1&lt;=len &amp;&amp; j+L-1&lt;=len; j+=L)&#123; if(j-M*L&gt;=i)&#123; ull tmp=hash_str(j-M*L, j-M*L+L-1); mp[tmp]--; if(mp[tmp]==0) mp.erase(tmp); &#125; mp[hash_str(j, j+L-1)]++; if(mp.size()==M) ans++; &#125; &#125; printf("%d\n", ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>map</tag>
        <tag>hash</tag>
      </tags>
  </entry>
</search>
