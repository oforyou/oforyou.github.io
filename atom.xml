<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oforyou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oforyou.github.io/"/>
  <updated>2018-11-12T14:32:41.509Z</updated>
  <id>https://oforyou.github.io/</id>
  
  <author>
    <name>du lun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF1055C</title>
    <link href="https://oforyou.github.io/2018/11/12/CF1055C/"/>
    <id>https://oforyou.github.io/2018/11/12/CF1055C/</id>
    <published>2018-11-12T13:29:41.000Z</published>
    <updated>2018-11-12T14:32:41.509Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>  给[l1,r1],d1,并且规定[l1,r1], [l1+d1, r1+d1]…[l1+k*d1, r1+k*d1]是happy区间，l2,r2,d2也如此，现在就是让求最长的连续区间，并且这个区间对1,2都是happy的</p><p>思路：</p><p>这个题一看就知道循环节，最小公倍数，但是直接暴力循环节超时，我们可以考虑这个式子 d1x+d2y=gcd(d1, d2) (mod最小公倍数)，我们知道，最大的答案是两区间较小者，所以我们应该让两区间左端点尽量重合，假如左端点相差dis，我们通过上面式子可以看出，我们可以调整x，y逼近dis</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll l1, l2, r1, r2, d1, d2;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">jiao</span><span class="params">(ll a1, ll b1, ll a2, ll b2)</span></span>&#123;</span><br><span class="line">    ll a3=max(a1, a2);</span><br><span class="line">    ll b3=min(b1, b2);</span><br><span class="line">    <span class="keyword">return</span> max(<span class="number">0l</span>l, b3-a3+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l1&gt;&gt;r1&gt;&gt;d1&gt;&gt;l2&gt;&gt;r2&gt;&gt;d2;</span><br><span class="line"></span><br><span class="line">    ll gd=__gcd(d1, d2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l1&lt;l2) swap(l1, l2), swap(r1, r2);</span><br><span class="line">    ll dis=l1-l2;</span><br><span class="line"></span><br><span class="line">    ll bei=dis/gd;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ans=max(ans, jiao(l1, r1, l2+bei*gd, r2+bei*gd));</span><br><span class="line">    ans=max(ans, jiao(l1, r1, l2+bei*gd+gd, r2+bei*gd+gd));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;  给[l1,r1],d1,并且规定[l1,r1], [l1+d1, r1+d1]…[l1+k*d1, r1+k*d1]是happy区间，l2,r2,d2也如此，现在就是让求最长的连续区间，并且这个区间对1,2都是happy的&lt;/p&gt;
&lt;p&gt;思路：&lt;/
      
    
    </summary>
    
      <category term="-&quot;算法&quot;" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="-&quot;欧几里得算法&quot;" scheme="https://oforyou.github.io/tags/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2018.11.02晚</title>
    <link href="https://oforyou.github.io/2018/11/02/2018-11-02%E6%99%9A/"/>
    <id>https://oforyou.github.io/2018/11/02/2018-11-02晚/</id>
    <published>2018-11-02T12:49:27.000Z</published>
    <updated>2018-11-05T12:15:12.825Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="dairy" scheme="https://oforyou.github.io/categories/dairy/"/>
    
    
  </entry>
  
  <entry>
    <title>ZOJ-3543不错的dp</title>
    <link href="https://oforyou.github.io/2018/11/01/ZOJ-3543%E4%B8%8D%E9%94%99%E7%9A%84dp/"/>
    <id>https://oforyou.github.io/2018/11/01/ZOJ-3543不错的dp/</id>
    <published>2018-11-01T08:40:58.000Z</published>
    <updated>2018-11-01T09:03:45.604Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>给长为n-1字符串，包括‘I’,’D’,’?’三个字符，含义分别是：</p><ul><li>‘I’比前面的数大</li><li>‘D’比前面的数小</li><li>‘？’不受限制</li></ul><p>问题是有多少1~n的全排列满足这个关系串。</p><p>思路：</p><p>感觉挺难想的。设dp[i][j]代表1~i的全排列，以j数字结尾，并且满足这个关系串的种类数。</p><p>那么对于长度为i+1，如果是字符‘D’</p><p>dp[i+1][j]=sum(dp[i][k])                 k=j~i-1</p><p><strong>因为我们已经保证了i-1是满足的，当我们添加j使长度变为i，并且也要满足，就相当于前面大于等于j的数都+1，这样就变成了1~i满足关系串的全排列</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line">ll dp[N][N];</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">2</span>))&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'D'</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">1</span>; j--)</span><br><span class="line">                    dp[i][j]=(dp[i][j+<span class="number">1</span>]+dp[i<span class="number">-1</span>][j])%mo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'I'</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; j&lt;=i; j++)</span><br><span class="line">                    dp[i][j]=(dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%mo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ll sum=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; j++) sum=(sum+dp[i<span class="number">-1</span>][j])%mo;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++) dp[i][j]=sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            sum=(sum+dp[n][i])%mo;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给长为n-1字符串，包括‘I’,’D’,’?’三个字符，含义分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘I’比前面的数大&lt;/li&gt;
&lt;li&gt;‘D’比前面的数小&lt;/li&gt;
&lt;li&gt;‘？’不受限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题是有多少1~n的全排列满足这个关
      
    
    </summary>
    
    
      <category term="dp" scheme="https://oforyou.github.io/tags/dp/"/>
    
      <category term="思维" scheme="https://oforyou.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>二维线段树模板</title>
    <link href="https://oforyou.github.io/2018/10/31/%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
    <id>https://oforyou.github.io/2018/10/31/二维线段树模板/</id>
    <published>2018-10-31T07:21:44.000Z</published>
    <updated>2018-11-01T06:53:05.596Z</updated>
    
    <content type="html"><![CDATA[<p>这个模板是根据HDU-4819编写的。功能是用二维线段树进行</p><p>二维点修改和区间查询最小者和最大值。</p><p>二维线段树的思想跟一维一样，只不过一维是二分二叉树，二维</p><p>是四分四叉树。具体实现看代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOGN = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="number">1</span>&lt;&lt;LOGN);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXNODES = (<span class="number">3</span>*(<span class="number">1</span>&lt;&lt;(<span class="number">2</span>*LOGN)) + <span class="number">100</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_VAL = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MIN_VAL = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> son(x) (p*4-2+x)</span></span><br><span class="line"><span class="comment">//表示最大值，最小值信息的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dataInfo</span>&#123;</span></span><br><span class="line">    <span class="keyword">short</span> posx, posy;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    dataInfo()&#123;</span><br><span class="line">        posx = posy = val = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dataInfo(<span class="keyword">short</span> _posx, <span class="keyword">short</span> _posy, <span class="keyword">int</span> _val)&#123;</span><br><span class="line">        posx=_posx;</span><br><span class="line">        posy=_posy;</span><br><span class="line">        val=_val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//树的节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treeNode</span>&#123;</span></span><br><span class="line">    dataInfo maxv, minv;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        maxv = dataInfo(<span class="number">0</span>, <span class="number">0</span>, INT_MIN);</span><br><span class="line">        minv = dataInfo(<span class="number">0</span>, <span class="number">0</span>, INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;nodes[MAXNODES];</span><br><span class="line"><span class="comment">//得到节点的指针</span></span><br><span class="line"><span class="function">treeNode* <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;nodes[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表示x、y的范围</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Interval</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    Interval()&#123;&#125;</span><br><span class="line">    Interval(<span class="keyword">int</span> _l, <span class="keyword">int</span> _r)&#123;</span><br><span class="line">        l=_l; r=_r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r-l+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Interval <span class="title">left</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Interval(l, mid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Interval <span class="title">right</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Interval(mid()+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIntersectWith</span><span class="params">(Interval&amp; tarI)</span></span>&#123;<span class="comment">//判断两区间是否相交</span></span><br><span class="line">        <span class="keyword">return</span> !(l&gt;tarI.r || r&lt;tarI.l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInclude</span><span class="params">(Interval&amp; tarI)</span></span>&#123;<span class="comment">//是否包含tarI区间</span></span><br><span class="line">        <span class="keyword">return</span> l&lt;=tarI.l &amp;&amp; tarI.r&lt;=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//是否包含v点</span></span><br><span class="line">        <span class="keyword">return</span> l&lt;=v &amp;&amp; v&lt;=r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_segtree</span><span class="params">(<span class="keyword">int</span> p, Interval xI, Interval yI)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xI.len()&lt;=<span class="number">0</span> || yI.len()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    treeNode* now=getNode(p);</span><br><span class="line">    now-&gt;reset();</span><br><span class="line">    <span class="keyword">if</span>(xI.len() == <span class="number">1</span> &amp;&amp; yI.len()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分别为左上、右上、左下、右下的矩形区间</span></span><br><span class="line">    build_segtree( son(<span class="number">0</span>), xI.left(), yI.left() );</span><br><span class="line">    build_segtree( son(<span class="number">1</span>), xI.right(), yI.left() );</span><br><span class="line">    build_segtree( son(<span class="number">2</span>), xI.left(), yI.right() );</span><br><span class="line">    build_segtree( son(<span class="number">3</span>), xI.right(), yI.right() );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点修改</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_segtree</span><span class="params">(<span class="keyword">int</span> p, Interval xI, Interval yI, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xI.len() &lt;= <span class="number">0</span> || yI.len()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!xI.in(x) || !yI.in(y) )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    treeNode *now = getNode(p);</span><br><span class="line">    <span class="keyword">if</span>(xI.len()==<span class="number">1</span> &amp;&amp; yI.len()==<span class="number">1</span>)&#123;</span><br><span class="line">        now-&gt;maxv=now-&gt;minv =dataInfo(x, y, val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isvalid[<span class="number">4</span>];</span><br><span class="line">    isvalid[<span class="number">0</span>]=insert_segtree( son(<span class="number">0</span>), xI.left(), yI.left(), x, y, val);</span><br><span class="line">    isvalid[<span class="number">1</span>]=insert_segtree( son(<span class="number">1</span>), xI.right(), yI.left(), x, y, val);</span><br><span class="line">    isvalid[<span class="number">2</span>]=insert_segtree( son(<span class="number">2</span>), xI.left(), yI.right(), x, y, val);</span><br><span class="line">    isvalid[<span class="number">3</span>]=insert_segtree( son(<span class="number">3</span>), xI.right(), yI.right(), x, y, val);</span><br><span class="line"></span><br><span class="line">    now-&gt;reset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isvalid[i]) <span class="keyword">continue</span>;<span class="comment">//只对有效的区间修改</span></span><br><span class="line">        treeNode *sonNode =getNode(son(i));</span><br><span class="line">        now-&gt;maxv=sonNode-&gt;maxv.val &gt; now-&gt;maxv.val?sonNode-&gt;maxv : now-&gt;maxv;</span><br><span class="line">        now-&gt;minv=sonNode-&gt;minv.val &lt; now-&gt;minv.val?sonNode-&gt;minv : now-&gt;minv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_segtree</span><span class="params">(<span class="keyword">int</span> p, Interval xI, Interval yI, Interval tarXI, Interval tarYI, treeNode&amp; ans)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(xI.len()&lt;=<span class="number">0</span> || yI.len()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tarXI.isIntersectWith(xI) || !tarYI.isIntersectWith(yI) )&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    treeNode *now=getNode(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans.maxv.val&gt;=now-&gt;maxv.val &amp;&amp; ans.minv.val&lt;=now-&gt;minv.val)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tarXI.isInclude(xI) &amp;&amp; tarYI.isInclude(yI))&#123;</span><br><span class="line">        ans.maxv.val=max(ans.maxv.val, now-&gt;maxv.val);</span><br><span class="line">        ans.minv.val=min(ans.minv.val, now-&gt;minv.val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    query_segtree( son(<span class="number">0</span>), xI.left(), yI.left(), tarXI, tarYI, ans );</span><br><span class="line">    query_segtree( son(<span class="number">1</span>), xI.right(), yI.left(), tarXI, tarYI, ans );</span><br><span class="line">    query_segtree( son(<span class="number">2</span>), xI.left(), yI.right(), tarXI, tarYI, ans );</span><br><span class="line">    query_segtree( son(<span class="number">3</span>), xI.right(), yI.right(), tarXI, tarYI, ans );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, tmp, cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        build_segtree(<span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n));</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">                insert_segtree(<span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n), i, j, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m, x, y, sz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++cas);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;sz);</span><br><span class="line">            Interval XI, YI;</span><br><span class="line">            XI.l=max(<span class="number">1</span>, x-sz/<span class="number">2</span>), XI.r=min(n, x+sz/<span class="number">2</span>);</span><br><span class="line">            YI.l=max(<span class="number">1</span>, y-sz/<span class="number">2</span>), YI.r=min(n, y+sz/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            treeNode ans; ans.reset();</span><br><span class="line"></span><br><span class="line">            query_segtree( <span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n), XI, YI, ans);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (ans.maxv.val+ans.minv.val)/<span class="number">2</span>);</span><br><span class="line">            insert_segtree(<span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n), x, y, (ans.maxv.val+ans.minv.val)/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是借鉴的网上的写法，因为他将各种都进行了封装，所以比较好理解。自己感觉竞赛还是简练一点比较好，下面代码是自己修改的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">810</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> son(x) (rt*4-2+x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mx, mn;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mx=INT_MIN;</span><br><span class="line">        mn=INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[(N&lt;&lt;<span class="number">2</span>)*(N&lt;&lt;<span class="number">2</span>)];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;xr || yl&gt;yr) <span class="keyword">return</span>;</span><br><span class="line">    tree[rt].reset();</span><br><span class="line">    <span class="keyword">if</span>(xl==xr&amp;&amp;yl==yr)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> midx=(xl+xr)&gt;&gt;<span class="number">1</span>, midy=(yl+yr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(son(<span class="number">0</span>), xl, midx, yl, midy);</span><br><span class="line">    build(son(<span class="number">1</span>), xl, midx, midy+<span class="number">1</span>, yr);</span><br><span class="line">    build(son(<span class="number">2</span>), midx+<span class="number">1</span>, xr, yl, midy);</span><br><span class="line">    build(son(<span class="number">3</span>), midx+<span class="number">1</span>, xr, midy+<span class="number">1</span>, yr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//push_up完全可以放在跟新里面 写起来更简洁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr)</span></span>&#123;</span><br><span class="line">    node&amp; now=tree[rt];</span><br><span class="line">    now.reset();</span><br><span class="line">    now.mx=max(now.mx, tree[son(<span class="number">0</span>)].mx);</span><br><span class="line">    now.mn=min(now.mn, tree[son(<span class="number">0</span>)].mn);</span><br><span class="line">    <span class="keyword">if</span>(yl&lt;yr)&#123;</span><br><span class="line">        now.mx=max(now.mx, tree[son(<span class="number">1</span>)].mx);</span><br><span class="line">        now.mn=min(now.mn, tree[son(<span class="number">1</span>)].mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(xl&lt;xr)&#123;</span><br><span class="line">        now.mx=max(now.mx, tree[son(<span class="number">2</span>)].mx);</span><br><span class="line">        now.mn=min(now.mn, tree[son(<span class="number">2</span>)].mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(xl&lt;xr &amp;&amp; yl&lt;yr)&#123;</span><br><span class="line">        now.mx=max(now.mx, tree[son(<span class="number">3</span>)].mx);</span><br><span class="line">        now.mn=min(now.mn, tree[son(<span class="number">3</span>)].mn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//point update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;xr || yl&gt;yr) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    node&amp; now=tree[rt];</span><br><span class="line">    <span class="keyword">if</span>(xl==xr&amp;&amp;xl==x &amp;&amp; yl==yr&amp;&amp;yl==y)&#123;</span><br><span class="line">        now.mx=val;</span><br><span class="line">        now.mn=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> midx=(xl+xr)&gt;&gt;<span class="number">1</span>, midy=(yl+yr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x&lt;=midx &amp;&amp; y&lt;=midy)&#123;</span><br><span class="line">        upd(son(<span class="number">0</span>), xl, midx, yl, midy, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;=midx &amp;&amp; y&gt;midy)&#123;</span><br><span class="line">        upd(son(<span class="number">1</span>), xl, midx, midy+<span class="number">1</span>, yr, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;midx &amp;&amp; y&lt;=midy)&#123;</span><br><span class="line">        upd(son(<span class="number">2</span>), midx+<span class="number">1</span>, xr, yl, midy, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        upd(son(<span class="number">3</span>), midx+<span class="number">1</span>, xr, midy+<span class="number">1</span>, yr, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    push_up(rt, xl, xr, yl, yr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//interval query</span></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr, <span class="keyword">int</span> qxl, <span class="keyword">int</span> qxr, <span class="keyword">int</span> qyl, <span class="keyword">int</span> qyr)</span></span>&#123;</span><br><span class="line">    node tmp; tmp.reset();</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;xr || yl&gt;yr) <span class="keyword">return</span> tmp;</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;qxr || qxl&gt;xr || yl&gt;qyr || qyl&gt;yr) <span class="keyword">return</span> tmp;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(qxl&lt;=xl &amp;&amp; xr&lt;=qxr &amp;&amp; qyl&lt;=yl &amp;&amp; yr&lt;=qyr)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> midx=(xl+xr)&gt;&gt;<span class="number">1</span>, midy=(yl+yr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    node ret; ret.reset();</span><br><span class="line">    <span class="keyword">if</span>(qxl&lt;=midx &amp;&amp; qyl&lt;=midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">0</span>), xl, midx, yl, midy, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qxl&lt;=midx &amp;&amp; qyr&gt;midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">1</span>), xl, midx, midy+<span class="number">1</span>, yr, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qxr&gt;midx &amp;&amp; qyl&lt;=midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">2</span>), midx+<span class="number">1</span>, xr, yl, midy, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qxr&gt;midx &amp;&amp; qyr&gt;midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">3</span>), midx+<span class="number">1</span>, xr, midy+<span class="number">1</span>, yr, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T, n, cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">                upd(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, i, j, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m, x, y, sz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++cas);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;sz);</span><br><span class="line">            <span class="keyword">int</span> qxl=max(<span class="number">1</span>, x-sz/<span class="number">2</span>), qxr=min(n, x+sz/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> qyl=max(<span class="number">1</span>, y-sz/<span class="number">2</span>), qyr=min(n, y+sz/<span class="number">2</span>);</span><br><span class="line">            node ans;</span><br><span class="line">           </span><br><span class="line">            ans=query(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, qxl, qxr, qyl, qyr);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (ans.mn + ans.mx)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            upd(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, x, y, (ans.mn+ans.mx)/<span class="number">2</span>);</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个模板是根据HDU-4819编写的。功能是用二维线段树进行&lt;/p&gt;
&lt;p&gt;二维点修改和区间查询最小者和最大值。&lt;/p&gt;
&lt;p&gt;二维线段树的思想跟一维一样，只不过一维是二分二叉树，二维&lt;/p&gt;
&lt;p&gt;是四分四叉树。具体实现看代码。&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二维线段树" scheme="https://oforyou.github.io/tags/%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4821 String --hash+map</title>
    <link href="https://oforyou.github.io/2018/10/30/HDU-4821-String-hash-map/"/>
    <id>https://oforyou.github.io/2018/10/30/HDU-4821-String-hash-map/</id>
    <published>2018-10-30T02:30:03.000Z</published>
    <updated>2018-10-30T03:27:08.605Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>给上限为1e5的字符串，找出有多少长度为M*L的子串，并且该子串的M个长度为L的子串各不相同。</p><p>思路：</p><p>开始认为子串不想同的定义是每个位置的字符不相同，感觉说的有歧义。</p><blockquote><p>two strings are considered as “diversified” if they don’t have the same character for every position. </p></blockquote><p>最暴力的算法就是枚举所有长度为M*L的子串，判断hash子串是否合格。但是枚举子串是n^2的时间复杂度。可以仔细想一下，我们可以从下标1~L枚举起点，然后以这个起点用指针每次跳L步长。然后跟尺取原理似的一直保持map里的元素是M个。这样时间复杂度是O（L*n/L）,即O(n)。为什么用map去重而不用set，原因就是对于相同的我们记住它出现了几次，只有他出现的次数==0的时候才将它删去。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ull base[N], _hash[N], mul=<span class="number">37</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">hash_str</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _hash[r]-_hash[l<span class="number">-1</span>]*base[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, L;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;M, &amp;L))&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">        base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        _hash[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)&#123;</span><br><span class="line">            base[i]=base[i<span class="number">-1</span>]*mul;</span><br><span class="line">            _hash[i]=_hash[i<span class="number">-1</span>]*mul+str[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>&lt;ull, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=L; i++)&#123;<span class="comment">//enum start point</span></span><br><span class="line">            mp.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; i+M*L<span class="number">-1</span>&lt;=len &amp;&amp; j+L<span class="number">-1</span>&lt;=len; j+=L)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-M*L&gt;=i)&#123;</span><br><span class="line">                    ull tmp=hash_str(j-M*L, j-M*L+L<span class="number">-1</span>);</span><br><span class="line">                    mp[tmp]--;</span><br><span class="line">                    <span class="keyword">if</span>(mp[tmp]==<span class="number">0</span>) mp.erase(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                mp[hash_str(j, j+L<span class="number">-1</span>)]++;</span><br><span class="line">                <span class="keyword">if</span>(mp.size()==M) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给上限为1e5的字符串，找出有多少长度为M*L的子串，并且该子串的M个长度为L的子串各不相同。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;开始认为子串不想同的定义是每个位置的字符不相同，感觉说的有歧义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;two str
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM" scheme="https://oforyou.github.io/tags/ACM/"/>
    
      <category term="map" scheme="https://oforyou.github.io/tags/map/"/>
    
      <category term="hash" scheme="https://oforyou.github.io/tags/hash/"/>
    
  </entry>
  
</feed>
