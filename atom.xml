<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oforyou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oforyou.github.io/"/>
  <updated>2018-10-30T03:27:08.605Z</updated>
  <id>https://oforyou.github.io/</id>
  
  <author>
    <name>du lun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDU 4821 String --hash+map</title>
    <link href="https://oforyou.github.io/2018/10/30/HDU-4821-String-hash-map/"/>
    <id>https://oforyou.github.io/2018/10/30/HDU-4821-String-hash-map/</id>
    <published>2018-10-30T02:30:03.000Z</published>
    <updated>2018-10-30T03:27:08.605Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>给上限为1e5的字符串，找出有多少长度为M*L的子串，并且该子串的M个长度为L的子串各不相同。</p><p>思路：</p><p>开始认为子串不想同的定义是每个位置的字符不相同，感觉说的有歧义。</p><blockquote><p>two strings are considered as “diversified” if they don’t have the same character for every position. </p></blockquote><p>最暴力的算法就是枚举所有长度为M*L的子串，判断hash子串是否合格。但是枚举子串是n^2的时间复杂度。可以仔细想一下，我们可以从下标1~L枚举起点，然后以这个起点用指针每次跳L步长。然后跟尺取原理似的一直保持map里的元素是M个。这样时间复杂度是O（L*n/L）,即O(n)。为什么用map去重而不用set，原因就是对于相同的我们记住它出现了几次，只有他出现的次数==0的时候才将它删去。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ull base[N], _hash[N], mul=<span class="number">37</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">hash_str</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _hash[r]-_hash[l<span class="number">-1</span>]*base[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, L;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;M, &amp;L))&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">        base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        _hash[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)&#123;</span><br><span class="line">            base[i]=base[i<span class="number">-1</span>]*mul;</span><br><span class="line">            _hash[i]=_hash[i<span class="number">-1</span>]*mul+str[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>&lt;ull, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=L; i++)&#123;<span class="comment">//enum start point</span></span><br><span class="line">            mp.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; i+M*L<span class="number">-1</span>&lt;=len &amp;&amp; j+L<span class="number">-1</span>&lt;=len; j+=L)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-M*L&gt;=i)&#123;</span><br><span class="line">                    ull tmp=hash_str(j-M*L, j-M*L+L<span class="number">-1</span>);</span><br><span class="line">                    mp[tmp]--;</span><br><span class="line">                    <span class="keyword">if</span>(mp[tmp]==<span class="number">0</span>) mp.erase(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                mp[hash_str(j, j+L<span class="number">-1</span>)]++;</span><br><span class="line">                <span class="keyword">if</span>(mp.size()==M) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给上限为1e5的字符串，找出有多少长度为M*L的子串，并且该子串的M个长度为L的子串各不相同。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;开始认为子串不想同的定义是每个位置的字符不相同，感觉说的有歧义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;two str
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM" scheme="https://oforyou.github.io/tags/ACM/"/>
    
      <category term="map" scheme="https://oforyou.github.io/tags/map/"/>
    
      <category term="hash" scheme="https://oforyou.github.io/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://oforyou.github.io/2018/10/28/hello-world/"/>
    <id>https://oforyou.github.io/2018/10/28/hello-world/</id>
    <published>2018-10-28T11:12:45.246Z</published>
    <updated>2018-10-28T11:12:45.247Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
