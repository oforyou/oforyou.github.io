<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oforyou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oforyou.github.io/"/>
  <updated>2018-12-12T07:19:53.248Z</updated>
  <id>https://oforyou.github.io/</id>
  
  <author>
    <name>du lun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 小知识点</title>
    <link href="https://oforyou.github.io/2018/12/12/Java-%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://oforyou.github.io/2018/12/12/Java-小知识点/</id>
    <published>2018-12-12T07:08:43.000Z</published>
    <updated>2018-12-12T07:19:53.248Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s0=<span class="string">"helloworld"</span>;</span><br><span class="line">    String s1=<span class="string">"helloworld"</span>;</span><br><span class="line">   </span><br><span class="line">    System.out.println(s0==s1); <span class="comment">//true s0跟s1是指向同一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s0=<span class="string">"helloworld"</span>; </span><br><span class="line">    String s1=<span class="keyword">new</span> String(<span class="string">"helloworld"</span>); </span><br><span class="line"> </span><br><span class="line">    System.out.println( s0==s1 ); <span class="comment">//false  s0跟s1是不同的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>“==”操作符的作用</strong></p><ol><li><p>用于基本数据类型的比较 </p></li><li><p>判断引用是否指向堆内存的同一块地址。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"java"</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s1==s2);            <span class="comment">//false</span></span><br><span class="line">System.out.println(s1.equals(s2));    <span class="comment">//true  所以字符串比较尽量用equals</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Java" scheme="https://oforyou.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Packet Tracer中的命令</title>
    <link href="https://oforyou.github.io/2018/12/10/Packet-Tracer%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>https://oforyou.github.io/2018/12/10/Packet-Tracer中的命令/</id>
    <published>2018-12-10T11:14:01.000Z</published>
    <updated>2018-12-11T09:09:18.371Z</updated>
    
    <content type="html"><![CDATA[<p>密码设置：</p><p>特权EXEC模式密码：</p><p>在全局配置下， &gt;&gt;enbale secret + …</p><p>线路密码：</p><p>全局模式下，&gt;&gt;line console 0  &gt;&gt; password + … &gt;&gt;login</p><p>加密显示密码：</p><p>service password-encryption</p><p>设置警告标语：</p><p>banner motd #Legal action will be pursued for any unauthorized use#</p><p>显示路由器的 MAC 地址两种方式：</p><ul><li><p>通过控制台连接到 R1 并使用 show interfaces g0/1 命令查找 MAC</p></li><li><p>另一种显示路由器上 MAC 地址的方法是使用 show arp 命令。使用 show arp 命令显示 MAC 地址信息。 此命令将第 2 层地址映射到与其对应的第 3 层地址。</p></li></ul><p>查看交换机上的 MAC 地址</p><ul><li><p>show interfaces </p></li><li><p>show mac address-table </p></li></ul><p>在 Cisco IOS 路由器上，show ip route 命令可用于显示路由器的路由表</p><p>查看运行的配置文件 show running-config </p><p>用于将运行配置文件保存到启动配置文件的命令为：copy running-config startup-config  （即保存到NVRAM）</p><p>删除启动配置文件 erase NVRAM:startup-config</p><p>用于从全局配置模式导航到接口配置模式  interface vlan 1</p><p>ip address 192.168.10.2 255.255.255.0  </p><p>no shutdown</p><p>设置线路ip地址</p><p>ip default-gateway …..    设置默认网关</p><p>Cisco 1941 路由器配备有两个千兆以太网接口和一个由两个接口组成的串行 WAN 接口卡 (WIC)；接口的命名方式如下：</p><ul><li><p>Gigabit Ethernet 0/0 (G0/0)</p></li><li><p>Gigabit Ethernet 0/1 (G0/1)</p></li><li><p>Serial 0/0/0 (S0/0/0)</p></li><li><p>Serial 0/0/1 (S0/0/1)</p><p>交换机 IP 地址要在交换机虚拟接口 (SVI) 上配置</p></li></ul><p>interface Vlan1</p><p> ip address 192.168.10.50 255.255.255.0</p><p> no shut </p><p>重命名交换机</p><p>hostname …</p><p>R1(config)# ipv6 unicast-routing    让路由器转发ipv6</p><p>ipv6 address 2001:DB8:1:1::1/64 配置ipv6地址</p><p>ipv6 address FE80::1 link-local</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;密码设置：&lt;/p&gt;
&lt;p&gt;特权EXEC模式密码：&lt;/p&gt;
&lt;p&gt;在全局配置下， &amp;gt;&amp;gt;enbale secret + …&lt;/p&gt;
&lt;p&gt;线路密码：&lt;/p&gt;
&lt;p&gt;全局模式下，&amp;gt;&amp;gt;line console 0  &amp;gt;&amp;gt; password + …
      
    
    </summary>
    
      <category term="网络" scheme="https://oforyou.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer66</title>
    <link href="https://oforyou.github.io/2018/12/03/%E5%89%91%E6%8C%87offer66/"/>
    <id>https://oforyou.github.io/2018/12/03/剑指offer66/</id>
    <published>2018-12-03T10:14:04.000Z</published>
    <updated>2018-12-06T07:55:58.183Z</updated>
    
    <content type="html"><![CDATA[<ol><li>25</li></ol><p>该题难点在随机指针的复制，复制的随机指针应该与原先的随机指针指向相同的相对位置，所以我的做法是在原先链表中先插空复制，这样做的目的是知道随机指针的指向，然后再分离出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct RandomListNode &#123;</span></span><br><span class="line"><span class="comment">    int label;</span></span><br><span class="line"><span class="comment">    struct RandomListNode *next, *random;</span></span><br><span class="line"><span class="comment">    RandomListNode(int x) :</span></span><br><span class="line"><span class="comment">            label(x), next(NULL), random(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">RandomListNode* <span class="title">Clone</span><span class="params">(RandomListNode* pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHead == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//double</span></span><br><span class="line">RandomListNode *p = pHead, *q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">q = <span class="keyword">new</span> RandomListNode(p-&gt;label);</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">p = p-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//random</span></span><br><span class="line">p = pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;random == <span class="literal">NULL</span>)</span><br><span class="line">p-&gt;next-&gt;random = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p-&gt;next-&gt;random = p-&gt;random-&gt;next;</span><br><span class="line">p = p-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//seperate</span></span><br><span class="line">p = pHead;</span><br><span class="line">RandomListNode *qHead = <span class="literal">NULL</span>;</span><br><span class="line">q = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="literal">NULL</span>) &#123;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">qHead = q;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> qHead;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>26</li></ol><p>有序链表就是BST的中序遍历，这个题可以用递归解决，每次我们将跟节点与左/右边排好序的双向链表链接，函数返回最小的（也就是最左边的）数的指针。那么对于左边，我们需要链接最右边的节点，所以需要定位到最右边。我用的是双向链表，这样就可以O(1)定位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">struct TreeNode &#123;</span><br><span class="line">int val;</span><br><span class="line">struct TreeNode *left;</span><br><span class="line">struct TreeNode *right;</span><br><span class="line">TreeNode(int x) :</span><br><span class="line">val(x), left(NULL), right(NULL) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;*/</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    </span><br><span class="line">    TreeNode* getList(TreeNode* root)&#123;</span><br><span class="line">        if(root==NULL) return NULL;</span><br><span class="line">        TreeNode *List=getList(root-&gt;left), *leftMost=root, *rightMost=root;</span><br><span class="line">        if(List!=NULL)&#123;</span><br><span class="line">            leftMost=List;</span><br><span class="line">            List=List-&gt;left;</span><br><span class="line">            List-&gt;right=root;</span><br><span class="line">            root-&gt;left=List;</span><br><span class="line">        &#125;</span><br><span class="line">        List=getList(root-&gt;right);</span><br><span class="line">        if(List!=NULL)&#123;</span><br><span class="line">            rightMost=List-&gt;left;</span><br><span class="line">            List-&gt;left=root;</span><br><span class="line">            root-&gt;right=List;</span><br><span class="line">        &#125;</span><br><span class="line">        leftMost-&gt;left=rightMost;</span><br><span class="line">        rightMost-&gt;right=leftMost;</span><br><span class="line">        return leftMost;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TreeNode* Convert(TreeNode* pRootOfTree)</span><br><span class="line">    &#123;</span><br><span class="line">        if(pRootOfTree==NULL) return NULL;</span><br><span class="line">        TreeNode* Head=NULL;</span><br><span class="line">        Head=getList(pRootOfTree);</span><br><span class="line">        Head-&gt;left-&gt;right=NULL;</span><br><span class="line">        Head-&gt;left=NULL;</span><br><span class="line">        return Head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>27</li></ol><p>这个题要求</p><ul><li>无重复全排列</li><li>字典序</li></ul><p>所以递归的时候要做到几点</p><ul><li>和第pos个位置相同的不交换</li><li>swap完之后不要交换回去（这个不明白，是看了别人那样做的）</li><li>基于第二点，递归str不能传递引用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPer</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> sz, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ans, <span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos == sz) &#123;</span><br><span class="line">ans.push_back(str);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; sz; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != pos &amp;&amp; str[i] == str[pos]) <span class="keyword">continue</span>;</span><br><span class="line">swap(str[pos], str[i]);</span><br><span class="line">getPer(pos + <span class="number">1</span>, sz, ans, str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; Permutation(<span class="built_in">string</span> str) &#123;</span><br><span class="line">sort(str.begin(), str.end());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line"><span class="keyword">if</span> (str.length() == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">getPer(<span class="number">0</span>, str.length(), ans, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>28</li></ol><p>思路比较好的题，自己本能反应是用unordered_map， 其实用一个出现次数变量，如果有出现次数超过n/2的数，最后通过相同+， 不同-， 最后剩下的肯定是符合的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>, f=<span class="number">0</span>, ci=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sz=numbers.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : numbers)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==ans)&#123;</span><br><span class="line">                f++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(f==<span class="number">0</span>)&#123;</span><br><span class="line">                    ans=i;</span><br><span class="line">                    f=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    f--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : numbers)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==ans)</span><br><span class="line">                ci++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ci*<span class="number">2</span>&gt;sz)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>40</li></ol><p>这道题的思路特别巧妙，找数组出现次数只有一次的两个数。利用抑或运算的性质，所有数的^和就是所求两数的^和，在用该^的最低位，将所有数分为包含该位和不包含该位的两组，^完即可得到结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FindNumsAppearOnce</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data,<span class="keyword">int</span>* num1,<span class="keyword">int</span> *num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oxr=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:data)&#123;</span><br><span class="line">            oxr^=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lowbit=oxr&amp;-oxr;</span><br><span class="line">        *num1=<span class="number">0</span>; *num2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:data)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;lowbit)</span><br><span class="line">                *num1^=i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                *num2^=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>52</li></ol><p>这道题考验自己的分析归纳能力吧。</p><p>（1）若pattern第i+1个字符是‘*’</p><p>①若str和pattern第i个字符相等（包括任意字符和’.’匹配），可以选择匹配，也可以选择不匹配</p><p>②若第i个字符不相等，一定是‘*’代表出现0次</p><p>（2）若pattern第i+1不是‘*’</p><p>①若可以匹配则缩短字符串</p><p>②若不可以匹配则返回false</p><p>这样递归的缩短字符串 最后两个串是空则返回true，若pattern为空而str不为空，返回false。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">char</span>* pattern)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(*str==<span class="number">0</span> &amp;&amp; *pattern==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(*str!=<span class="number">0</span> &amp;&amp; *pattern==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(*(pattern+<span class="number">1</span>)==<span class="string">'*'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*str==*pattern || *str!=<span class="number">0</span> &amp;&amp; *pattern==<span class="string">'.'</span>)</span><br><span class="line">                <span class="keyword">return</span> match(str+<span class="number">1</span>, pattern) || match(str, pattern+<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> match(str, pattern+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(*str==*pattern || *str!=<span class="number">0</span> &amp;&amp; *pattern==<span class="string">'.'</span>)</span><br><span class="line">                <span class="keyword">return</span> match(str+<span class="number">1</span>, pattern+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="7"><li>63</li></ol><p>写这道题的目的不是为了思路，而是记录一下自己犯的致命的错误，一定要注意数据类型的区别，比如下面这个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, less&lt;<span class="keyword">int</span>&gt; &gt; gq;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; lq;</span><br><span class="line"><span class="keyword">if</span>(lq.size()-gq.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">gq.push(lq.top());</span><br><span class="line">    lq.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (gq.size()&gt;lq.size())&#123;</span><br><span class="line">    lq.push(gq.top();</span><br><span class="line">    gq.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为size()是size_type类型，size_type 是 unsigned int，所以如果第三行相减成了负值，因为是unsigned，所以会变成很大的数。应该把值赋值给int，再相减</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, less&lt;<span class="keyword">int</span>&gt; &gt; gq;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; lq;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lq.empty() || lq.top()&lt;=num) lq.push(num);</span><br><span class="line">        <span class="keyword">else</span> gq.push(num);</span><br><span class="line">        <span class="keyword">int</span> sz1=lq.size(), sz2=gq.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sz1-sz2&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            gq.push(lq.top());</span><br><span class="line">            lq.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sz2&gt;sz1)&#123;</span><br><span class="line">            lq.push(gq.top());</span><br><span class="line">            gq.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">GetMedian</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz=lq.size()+gq.size();</span><br><span class="line">        <span class="keyword">if</span>(sz==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sz&amp;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> lq.top();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.5</span>*(lq.top()+gq.top());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;25&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该题难点在随机指针的复制，复制的随机指针应该与原先的随机指针指向相同的相对位置，所以我的做法是在原先链表中先插空复制，这样做的目的是知道随机指针的指向，然后再分离出来。&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>3sum-leetcode 15</title>
    <link href="https://oforyou.github.io/2018/11/29/3sum-leetcode-15/"/>
    <id>https://oforyou.github.io/2018/11/29/3sum-leetcode-15/</id>
    <published>2018-11-29T03:31:47.000Z</published>
    <updated>2018-11-29T03:42:05.185Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>给n个数，寻找和为0的三元组，去重。不管target和是几，也不管是几元组，假如是找k元组，这种题的的套路是：</p><ul><li><p>排序</p></li><li><p>外层k-2个循环枚举k-2个数</p></li><li><p>剩下两个数用双指针，从两端寻找</p></li></ul><p>所以总的时间复杂度是O(n^(k-1))。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="keyword">int</span> sz = nums.size();</span><br><span class="line"><span class="keyword">if</span> (sz == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">sort(nums.begin(), nums.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = i + <span class="number">1</span>, k = sz - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>) &#123;</span><br><span class="line">ans.push_back(&#123; nums[i], nums[j], nums[k] &#125;);</span><br><span class="line"><span class="keyword">while</span> (j &lt; sz &amp;&amp; nums[++j] == nums[j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> (j &lt; sz &amp;&amp; nums[++j] == nums[j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span> (k &gt; j &amp;&amp; nums[--k] == nums[k + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给n个数，寻找和为0的三元组，去重。不管target和是几，也不管是几元组，假如是找k元组，这种题的的套路是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外层k-2个循环枚举k-2个数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;剩
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://oforyou.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>2018-11-26</title>
    <link href="https://oforyou.github.io/2018/11/26/2018-11-26/"/>
    <id>https://oforyou.github.io/2018/11/26/2018-11-26/</id>
    <published>2018-11-26T08:24:54.000Z</published>
    <updated>2018-11-26T08:32:43.548Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1899/FpSUXeVXfHymI4YURLixlfT6WoEsW+e+PmXk15aEHSUKkSXQ1uKaesjGyEVcT3Ltt6xOmVCWlno1Tdqa5W+rPY7P3tZVp9scXY4G/4+T2B4exSoBjUEy0un7L+Fgz34CV6Tm29g2jhFKOq0xqdHpxLhOZKQoRizD3tmj5IN7gVDVYGC6+uqFFOcxXhWx9sUikVRgOV7olvScX7f54DxArUzUbR/VAWtddj7TU985Td9lAuCa4Z6503N/a7o/XrOl0pYODIN+Hwk2R6m93aMpYdsar+g3IrmIziPMR4Q+jRdTaVj6LqQP+rkVhrOIER8bHybEnLvX12rgEI6BfuzeXAq/DqA4Uew21XGU8FSFKsokhUBv67vXqHx5atVYLrlVEzT6JLyfI9sJ67rdtErGYULjwnTnoLdPsxG89fAFtB37q5qdv0WD8jVTLYPfHLoogP3xgBg1OkzcHg6M5g+HuNsrDp56IbfgWzLZ5aNyrBUWVxApaicqvN8ckek+skkoQH6dJdvF7J4Zf2nZd4OlbbJ+gfmlzM6VkCRq6HGk1pAG5EhVMq+YVYUWImeHDchsd3x/xZ2BUUbaS5eBhPOXbdxHC/lcJAqLV1/Cd3Wp1nMe5qsURS8dGrbje74w/oHo+vQ/YiU4djABZBOIXQUn40Y18bUGlqgysdfMLgDPCrQyzYxr66wHGSnSlEagVLouwBhZE4LyfOflpTLQKCPg/7e7WghzeMfMwPwwVyJ5tOKbKGbG9Gz2/5ajL1zl4wQ9saioaJs+Stn1yzgU0fngmsYAMJjtbyyRcdAlQVSquphaP5cm2IIlWlIcc79uytnAqQfgY9dBzmR8rYI+v85NkcoTzCdTlkSZkh/rKu+2J0+3+MWgUpDKbD+BR9I7+SzP4nVBzabMybZhheK4TrPh4hq5dc8fbGq6ohHfh/Zjy2s/lsBcG8Xcmnhexih3umD4wkxo30yUrRQy2SyCQexleSWqjHIwl5Ob+ei7MuMaAJHwnK3VlCnHSwj0AcdQJqYDuW62C6kQon6hb4pWKXCIoz6STI40ot8BbuC0+Jl4QiHzBt4y1PCHdVitlaXaRk7Mmmighak0TUqjACX10IqM0ZTAYk4uBTEDH6Inzlgpm8QRQ+I2TSBaD9ke2ki70geHEu6Vdk3FJ9NAnz/rp6opnJ8aRb066pxrI8rTwD+OTxIBR/Ka3hWbo2XXPxdYoWetzOTwmOFYrNa/tTwM78cLmsVvGwWdHHUVd24G3vi0Xyr0vQhUl063ijHxLiH9azaM3aVPMD8cHehKHpOtH5GWAnvw8ArI7DclYWEckK85YNM2YDXepM/vjJDHVXOgUcxTxpERKwj70SFIvT6q5ebMbLdYPpNLUM3YJ2wSKj+kO7kJBbDZNtPvKvQuDcRige3+YyaeUowcYX5lroy+WQ87VFOMG5bKDkVaSsXQZl+v1OtNh6vJ80pVMTOQ2CB2LxSTqCjeIiUjcw2rrvZsz2O4vwaZXBs3gtfLSK6LcB7vYWg84t9ymiFXhmZN04xJ5Qc6WNbdGKMR6jCsauRMNh7VucfYvLx2CXYYP8HVV4S9wOrrSZzxuotwK60e6koHrzxJlm5UCdoRIFikPw9g0jmf56zNXR9wpPh+XyksbG9JVs/3hRNmj4/t5t4nJTnwWEaQRKzAPbZngpMQ9Ql9tlThV+4yf43f70tBPexum45EAKWRXQHJOaNnVpl+SFAZ6ancawbPvehneqXvGRLt5omHZ1DRC/N7WGLC9XdfKA6E6L0nQupag/FcKTP630GuY6iDG9EI6Q8o3QvNmJp3KmxXoc7v70XVozB/B4+ddmFcQPcFKoTu7AlQlxzeOVqz6xcb+dOFotohLiJ25srRT/1XV3Za0DSuqQm6ARmaQVB7fGzlPASfzu2mNLhPzHBuAW1fitIuNHzt82nu1LezFPUXnC8x8K2PpQBWCgbaaH7FoYIB7KpHgcnQHvW5P5fKsV8AZv9hFRr2u5jUWh3zFstXSZGXEMj1RYVgY8bWqTLvHNWwE1KiqLGFUszUmjrVy8ShDFred6GwTq95Zoogvi2l1V9x7rdhw5QoXJxTDXaNjJD+hn7/kYfYr37Kw3TZirY2pysDwUDPfMZIi4cr3vnwyUVsFs9hK5M66Z8tpQ+dcUiCC3rgU28vFXlLZ8nmY2IkZ3i7MeLUCdQwGDHGxCCNE3yz2K6DRBD+8GdxrqQBGRhaa4MaON</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="dairy" scheme="https://oforyou.github.io/categories/dairy/"/>
    
    
  </entry>
  
  <entry>
    <title>PAT甲级1010</title>
    <link href="https://oforyou.github.io/2018/11/26/PAT%E7%94%B2%E7%BA%A71010/"/>
    <id>https://oforyou.github.io/2018/11/26/PAT甲级1010/</id>
    <published>2018-11-26T05:54:06.000Z</published>
    <updated>2018-11-26T06:05:47.144Z</updated>
    
    <content type="html"><![CDATA[<p>题意：给两个数，tags指明一个数的进制。问另外一个数是多少的时候两个数相等。给定的数最多是1e15，所以long long 可以存下。第二个数的进制可能非常大，比如第二个数是10，第一个数是1e10。那么第二个数进制是1e10的时候连个数是相等的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf= <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, ll&gt; to;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getVal</span><span class="params">(<span class="keyword">char</span> str[], ll base)</span></span>&#123;</span><br><span class="line">    ll ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">        ret=ret*base + to[str[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> s[], ll base, ll tar)</span></span>&#123;</span><br><span class="line">    ll num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; s[i]; i++)&#123;</span><br><span class="line">        num=num*base+to[s[i]];</span><br><span class="line">        <span class="keyword">if</span>(num&gt;tar) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;tar) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">binarySearch</span><span class="params">(<span class="keyword">char</span> s[], ll l, ll r, ll tar)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> flag=check(s, mid, tar);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag&gt;=<span class="number">0</span>)</span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(flag&lt;<span class="number">0</span>)</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(check(s, l, tar)==<span class="number">0</span>) <span class="keyword">return</span> l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> num1[<span class="number">20</span>], num2[<span class="number">20</span>], tmp[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> kd;</span><br><span class="line">    ll base;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) to[<span class="string">'0'</span>+i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> i=<span class="string">'a'</span>; i&lt;=<span class="string">'z'</span> ; i++)</span><br><span class="line">        to[i]=i-<span class="string">'a'</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, num1))&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, num2);</span><br><span class="line">        <span class="keyword">int</span> len1=<span class="built_in">strlen</span>(num1);</span><br><span class="line">        <span class="keyword">int</span> len2=<span class="built_in">strlen</span>(num2);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;kd, &amp;base);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(kd==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(tmp, num1);</span><br><span class="line">            <span class="built_in">strcpy</span>(num1, num2);</span><br><span class="line">            <span class="built_in">strcpy</span>(num2, tmp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ll tar=<span class="number">0</span>;</span><br><span class="line">        tar=getVal(num1, base);</span><br><span class="line"></span><br><span class="line">        ll low=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num2[i]) low=max(to[num2[i++]]+<span class="number">1</span>, low);</span><br><span class="line"></span><br><span class="line">        ll ans=binarySearch(num2, low, tar+<span class="number">1</span>, tar);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：给两个数，tags指明一个数的进制。问另外一个数是多少的时候两个数相等。给定的数最多是1e15，所以long long 可以存下。第二个数的进制可能非常大，比如第二个数是10，第一个数是1e10。那么第二个数进制是1e10的时候连个数是相等的。&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分" scheme="https://oforyou.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>manacher找出最长回文串</title>
    <link href="https://oforyou.github.io/2018/11/21/manacher%E6%89%BE%E5%87%BA%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>https://oforyou.github.io/2018/11/21/manacher找出最长回文串/</id>
    <published>2018-11-21T02:56:02.000Z</published>
    <updated>2018-11-21T03:21:53.029Z</updated>
    
    <content type="html"><![CDATA[<p>熟悉算法的可能知道manacher在线性时间能够找出最长回文串长度，但是要想找出最长回文串是谁，需要做一些改进，这时需要分奇偶讨论，枚举中心点。该题目来源于LeetCode 第五题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">""</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> idl=<span class="number">0</span>, idr=<span class="number">0</span>, anslen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> *r=<span class="keyword">new</span> <span class="keyword">int</span>[s.length()+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(r, <span class="number">0</span>, <span class="keyword">sizeof</span> r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mx=<span class="number">0</span>, mid=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//odd</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            r[i]=i&lt;mx ? min(r[<span class="number">2</span>*mid-i], mx-i) : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i-r[i]&gt;=<span class="number">0</span> &amp;&amp; i+r[i]&lt;=s.length() &amp;&amp; s[i-r[i]]==s[i+r[i]])&#123;</span><br><span class="line">                r[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+r[i]&gt;mx)&#123;</span><br><span class="line">                mid=i;</span><br><span class="line">                mx=i+r[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(anslen&lt;<span class="number">2</span>*r[i]<span class="number">-1</span>)&#123;</span><br><span class="line">                anslen=<span class="number">2</span>*r[i]<span class="number">-1</span>;</span><br><span class="line">                idl=i-r[i]+<span class="number">1</span>; idr=i+r[i]<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(r, <span class="number">0</span>, <span class="keyword">sizeof</span> r);</span><br><span class="line"></span><br><span class="line">        mx=<span class="number">0</span>, mid=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//even</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length()<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            r[i]=i&lt;mx? min(r[<span class="number">2</span>*mid-i], mx-i) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i-r[i]&gt;=<span class="number">0</span> &amp;&amp; i+r[i]+<span class="number">1</span>&lt;s.length() &amp;&amp; s[i-r[i]]==s[i+r[i]+<span class="number">1</span>]) r[i]++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i+r[i]&gt;mx)&#123;</span><br><span class="line">                mid=i;</span><br><span class="line">                mx=i+r[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(anslen&lt;<span class="number">2</span>*r[i])&#123;</span><br><span class="line">                anslen=<span class="number">2</span>*r[i];</span><br><span class="line">                idl=i-r[i]+<span class="number">1</span>; idr=i+r[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> ans=s.substr(idl, anslen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>传统的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> Ma[MAXN*<span class="number">2</span>]；</span><br><span class="line"><span class="keyword">int</span> Mp[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MAnacher</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">    Ma[l++]=<span class="string">'$'</span>;</span><br><span class="line">    Ma[l++]=<span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        Ma[l++]=s[i];</span><br><span class="line">        Ma[l++]=<span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Ma[l]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>, id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l; i++)&#123;</span><br><span class="line">        Mp[i]=mx&gt;i?min(Mp[<span class="number">2</span>*id-i], mx-i):<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(Ma[i+Mp[i]]==Ma[i-Mp[i]]) Mp[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i+Mp[i]&gt;mx)&#123;</span><br><span class="line">            mx=i+Mp[i];</span><br><span class="line">            id=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Mp[]中的最大值就是最长回文串的长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熟悉算法的可能知道manacher在线性时间能够找出最长回文串长度，但是要想找出最长回文串是谁，需要做一些改进，这时需要分奇偶讨论，枚举中心点。该题目来源于LeetCode 第五题&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="模板" scheme="https://oforyou.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>CF1055C</title>
    <link href="https://oforyou.github.io/2018/11/12/CF1055C/"/>
    <id>https://oforyou.github.io/2018/11/12/CF1055C/</id>
    <published>2018-11-12T13:29:41.000Z</published>
    <updated>2018-11-21T03:22:01.104Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>  给[l1,r1],d1,并且规定[l1,r1], [l1+d1, r1+d1]…[l1+k*d1, r1+k*d1]是happy区间，l2,r2,d2也如此，现在就是让求最长的连续区间，并且这个区间对1,2都是happy的</p><p>思路：</p><p>这个题一看就知道循环节，最小公倍数，但是直接暴力循环节超时，我们可以考虑这个式子 d1x+d2y=gcd(d1, d2) (mod最小公倍数)，我们知道，最大的答案是两区间较小者，所以我们应该让两区间左端点尽量重合，假如左端点相差dis，我们通过上面式子可以看出，我们可以调整x，y逼近dis</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll l1, l2, r1, r2, d1, d2;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">jiao</span><span class="params">(ll a1, ll b1, ll a2, ll b2)</span></span>&#123;</span><br><span class="line">    ll a3=max(a1, a2);</span><br><span class="line">    ll b3=min(b1, b2);</span><br><span class="line">    <span class="keyword">return</span> max(<span class="number">0l</span>l, b3-a3+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l1&gt;&gt;r1&gt;&gt;d1&gt;&gt;l2&gt;&gt;r2&gt;&gt;d2;</span><br><span class="line"></span><br><span class="line">    ll gd=__gcd(d1, d2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l1&lt;l2) swap(l1, l2), swap(r1, r2);</span><br><span class="line">    ll dis=l1-l2;</span><br><span class="line"></span><br><span class="line">    ll bei=dis/gd;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ans=max(ans, jiao(l1, r1, l2+bei*gd, r2+bei*gd));</span><br><span class="line">    ans=max(ans, jiao(l1, r1, l2+bei*gd+gd, r2+bei*gd+gd));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;  给[l1,r1],d1,并且规定[l1,r1], [l1+d1, r1+d1]…[l1+k*d1, r1+k*d1]是happy区间，l2,r2,d2也如此，现在就是让求最长的连续区间，并且这个区间对1,2都是happy的&lt;/p&gt;
&lt;p&gt;思路：&lt;/
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="欧几里得算法" scheme="https://oforyou.github.io/tags/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2018.11.02晚</title>
    <link href="https://oforyou.github.io/2018/11/02/2018-11-02%E6%99%9A/"/>
    <id>https://oforyou.github.io/2018/11/02/2018-11-02晚/</id>
    <published>2018-11-02T12:49:27.000Z</published>
    <updated>2018-11-05T12:15:12.825Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19l+30LwyJnSPxuCloADSlUhpe0dZUz1R1DCegM7SQ6PlmBkK1AqDaPB6ISrzFV91bT4CZcHyPoD/HIU1KBAEh1fk9mCWKF7rSWTt5Ha+9olP+ZSe/hB3E9REYvLt40CXhxhdQeyVANQXV5tiIHpH+dD4cfQ1OEaDZqyq3YJ+Ns0HthM2xP+ZhpjgMqnx39Xv2sNvFhiEuadUXN9qfyrfa9X8G+38XCCyIYB3YttdZfRZY0eoHdCD5Fg6mKKNYsf7dZ0LJT7wujnnO57Ava6i/dxXjqGmgC3/vEB+rJDBAn57TkEKcHKZ4cJCM3eLGO8CkuFJGzmOitpxVd33x1z6ZfOei7IiodHRJeEYdnxlG6XKUlQ6JkAtDByaxq59/GYlQ03Biuesp0YNxjFEVvIIglH3ugG4KNFEv/m+iFzOaczawm5QPmQOmsAagq33SoFl9vD+NHZyZGZsEHNK/YkiBkdeNYkR19h62AdQQ4uQ9ERZFX1Nu1TQxbTUBg8xlTumCoVKX5Uhww16TFoFiQYXtxCblm+rhCYQFpgUryP81OVMLTh9s0XbrXWCvnYau+sASXXn6fIldsuz6BLQh/g6Acazf7azlJbDC31JwcR+T7Si2UM60apoIclqDbZF5Ll4nQfA3K2Dr4iiQHIYyyYFSJwuE72ct7fsBxfJkeHNDMqQCz26hR7xM4i5TmFH5clI5eh4PRxDrCZ064bnCmt6qQM+oNW5wvZ/DAg5kZh1wcAwb17dXdOcUgMcDpZ/Omon5/YVN3DTHPcLdm3SsG522agPpYjJi/GRggidmgL8AEcjoBA2rjErCKE/hyQjWWQqa450xnhj3LJbUgmZCmY62znLVi/SuICaeXD7uusl0m9bzUhiHDcn360QWVJw6Tcnt/MZN5h0Ef+fUgEyFk0p5/0jGCmBIzjS3K9GCZijfRQbCnJjGv7xKHZ1op6lRemi8F0idXeTS3VkwfeD40MdCN0rZkRXrzKpyjYq30lJg3HXwuyFZDk6GCCsiNdPRQFeXeHjqNYXq8Wde1wFZGAA4fmzRLy0hH4hwz4pWSpPp5vDuaGgVs9AqDJT3HMLkNqJ0XNjuVRJ6W87KMZGAhWtT6Bz8uSSyd/Sc3kvfOUNGkk6bryC9BIDk41oS945W537bWgQ7ajOhMz8frfujOFfdqFDFZf9ysOrNNhf9WsoToqpwIj9qphe4eDJ8efwHvjyjzzqRFPDwwRpDMf5rkfjjga9oDu/q9wpmYrQFwYonWjSiEI4ICgrTzAUuGBuB2Xi47SGplOnYCJ15AVWG/KVQfH6OC55sjEjFGR7tktt+FpbA4hnINv6TMVZQwT9Ig+gOwBYwUcthw0SJA2WJLPOjl57VIksFfPGqCJejjR4ZEt+GD2h2Yt4dxp51U7SnLtPAOvh8NTKgfBLEz74yh7nHkGZhGT8q85U/iOl7hsP3VdqDE1aSicNroOvuoNpuiCbPXnWNotIzFhMfqJU09eUrQyqSDzRii+14CxSkehEtsG1kuL7a5Jy0y5bFDjuo2higCpWacXDe+XWCDIlrUbmbOiZlzNL1TtMjW+RxMdvz1n/WkMVVSvo3E/z0KdvkKPNkn9RwDMDZyhgjFIuhSCMk/U3m6n/hgIqPXYlAOVUZKPM/uW8o1ssL4i2TkWW7il/nvwowYsdLDoKH6+Efhq4i6IoK0EQotekgZJZkikASwZtzy8eWK6/2zzu+1iUsNkoPbFNPfCfgOdFwRw0e5v5oXKGsZ1HUKlBcLVwqVmDxowO14p1ZZSQ/KG+Y2XlaOk2oTkJMgeVPR2D3D3zTt87bqfJM89c4/+833SWsLow1+YaNe2Xu4y+C/hKmpPLmDgtrfKk/dlel82HICq3sHVQQ/LYOH1CbGt/uCqgNDkIVjFyh795U7SRKABeUjCnNshYMpYt5IYTSg8S8sM7xfEty8RFOTRLLt/kj5chk5ZPJgjKs8NwjrXi28AQkdFp6jqdrqjr163R7SiWSQVMflVf8RH+vq3ddlcGoT3kNR0nBoJ/mSD34chlPLJLZ2jk4bWpq7O1hbKO5E2TRH78skyJ1Jzai6T9H3O3bkBXywR3cCnmldccPamkeKK77jNHfpKEU8hAbQu7ASlb33NZFOSgUbUE4EzOVNrZbQfcMfk7NOhszGmWxG6MZSgK714bRzTTvwWNsqnrwKiW09rg7WOSJkv/Q5jMw89SrS4Do1K+7D0C+SlbnhlHeSEIoyHVOHyPgxp4Pgi0HBgva3SJCz/JjWQD3emwSAzYTd/PkOkNhemmGJttIqaATPmPlu9nUrHaRMbUQWK+6OiGY08WB2hj0VgMo/wyPjGVEhCtCdT33lgjBl6z4j3tIKn437XVR6FBYDha+7RbPJ81sScTtxEWvL15TLPSVeA5ycBdWKFa0XwEm7QQtCG9tL9VKgNfpKfFmBUoZXV6gFnCk3Vq9Ys/j4Jm70GvZo+w04I9+Wn+iW71vgo/2MNaveqimmD7P66yTlT3xxat912bZah/3iJtM7EnFLXDwZoz350+z0HTFBm05kL4fdPPQ5vf1cl72FpA88l9U1s9RWNg8PWmBaKVCI65oQzwxbwJhOWp+PlG4lou7/UdBLutcEyDNykDPObiT3B6IHpqXT1VeFb4QbhEwqtRfxwLYJyey36PQlC5PRY4WvsCEfifncRXUYY6BNCXk5xSlV1kfXo+LaU08m7gY3a/e51TNzNahUkpFEJ+yksq6kiHfjOV8pMoU5iVD4DJOK4Yu09ZbYRg==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="dairy" scheme="https://oforyou.github.io/categories/dairy/"/>
    
    
  </entry>
  
  <entry>
    <title>ZOJ-3543不错的dp</title>
    <link href="https://oforyou.github.io/2018/11/01/ZOJ-3543%E4%B8%8D%E9%94%99%E7%9A%84dp/"/>
    <id>https://oforyou.github.io/2018/11/01/ZOJ-3543不错的dp/</id>
    <published>2018-11-01T08:40:58.000Z</published>
    <updated>2018-11-01T09:03:45.604Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>给长为n-1字符串，包括‘I’,’D’,’?’三个字符，含义分别是：</p><ul><li>‘I’比前面的数大</li><li>‘D’比前面的数小</li><li>‘？’不受限制</li></ul><p>问题是有多少1~n的全排列满足这个关系串。</p><p>思路：</p><p>感觉挺难想的。设dp[i][j]代表1~i的全排列，以j数字结尾，并且满足这个关系串的种类数。</p><p>那么对于长度为i+1，如果是字符‘D’</p><p>dp[i+1][j]=sum(dp[i][k])                 k=j~i-1</p><p><strong>因为我们已经保证了i-1是满足的，当我们添加j使长度变为i，并且也要满足，就相当于前面大于等于j的数都+1，这样就变成了1~i满足关系串的全排列</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line">ll dp[N][N];</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">2</span>))&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'D'</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=<span class="number">1</span>; j--)</span><br><span class="line">                    dp[i][j]=(dp[i][j+<span class="number">1</span>]+dp[i<span class="number">-1</span>][j])%mo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'I'</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>; j&lt;=i; j++)</span><br><span class="line">                    dp[i][j]=(dp[i][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%mo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ll sum=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; j++) sum=(sum+dp[i<span class="number">-1</span>][j])%mo;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++) dp[i][j]=sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            sum=(sum+dp[n][i])%mo;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给长为n-1字符串，包括‘I’,’D’,’?’三个字符，含义分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘I’比前面的数大&lt;/li&gt;
&lt;li&gt;‘D’比前面的数小&lt;/li&gt;
&lt;li&gt;‘？’不受限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题是有多少1~n的全排列满足这个关
      
    
    </summary>
    
    
      <category term="dp" scheme="https://oforyou.github.io/tags/dp/"/>
    
      <category term="思维" scheme="https://oforyou.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>二维线段树模板</title>
    <link href="https://oforyou.github.io/2018/10/31/%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
    <id>https://oforyou.github.io/2018/10/31/二维线段树模板/</id>
    <published>2018-10-31T07:21:44.000Z</published>
    <updated>2018-11-01T06:53:05.596Z</updated>
    
    <content type="html"><![CDATA[<p>这个模板是根据HDU-4819编写的。功能是用二维线段树进行</p><p>二维点修改和区间查询最小者和最大值。</p><p>二维线段树的思想跟一维一样，只不过一维是二分二叉树，二维</p><p>是四分四叉树。具体实现看代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOGN = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="number">1</span>&lt;&lt;LOGN);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXNODES = (<span class="number">3</span>*(<span class="number">1</span>&lt;&lt;(<span class="number">2</span>*LOGN)) + <span class="number">100</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_VAL = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MIN_VAL = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> son(x) (p*4-2+x)</span></span><br><span class="line"><span class="comment">//表示最大值，最小值信息的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dataInfo</span>&#123;</span></span><br><span class="line">    <span class="keyword">short</span> posx, posy;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    dataInfo()&#123;</span><br><span class="line">        posx = posy = val = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dataInfo(<span class="keyword">short</span> _posx, <span class="keyword">short</span> _posy, <span class="keyword">int</span> _val)&#123;</span><br><span class="line">        posx=_posx;</span><br><span class="line">        posy=_posy;</span><br><span class="line">        val=_val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//树的节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treeNode</span>&#123;</span></span><br><span class="line">    dataInfo maxv, minv;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        maxv = dataInfo(<span class="number">0</span>, <span class="number">0</span>, INT_MIN);</span><br><span class="line">        minv = dataInfo(<span class="number">0</span>, <span class="number">0</span>, INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;nodes[MAXNODES];</span><br><span class="line"><span class="comment">//得到节点的指针</span></span><br><span class="line"><span class="function">treeNode* <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;nodes[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表示x、y的范围</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Interval</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    Interval()&#123;&#125;</span><br><span class="line">    Interval(<span class="keyword">int</span> _l, <span class="keyword">int</span> _r)&#123;</span><br><span class="line">        l=_l; r=_r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r-l+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Interval <span class="title">left</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Interval(l, mid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Interval <span class="title">right</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Interval(mid()+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIntersectWith</span><span class="params">(Interval&amp; tarI)</span></span>&#123;<span class="comment">//判断两区间是否相交</span></span><br><span class="line">        <span class="keyword">return</span> !(l&gt;tarI.r || r&lt;tarI.l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInclude</span><span class="params">(Interval&amp; tarI)</span></span>&#123;<span class="comment">//是否包含tarI区间</span></span><br><span class="line">        <span class="keyword">return</span> l&lt;=tarI.l &amp;&amp; tarI.r&lt;=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//是否包含v点</span></span><br><span class="line">        <span class="keyword">return</span> l&lt;=v &amp;&amp; v&lt;=r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_segtree</span><span class="params">(<span class="keyword">int</span> p, Interval xI, Interval yI)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xI.len()&lt;=<span class="number">0</span> || yI.len()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    treeNode* now=getNode(p);</span><br><span class="line">    now-&gt;reset();</span><br><span class="line">    <span class="keyword">if</span>(xI.len() == <span class="number">1</span> &amp;&amp; yI.len()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分别为左上、右上、左下、右下的矩形区间</span></span><br><span class="line">    build_segtree( son(<span class="number">0</span>), xI.left(), yI.left() );</span><br><span class="line">    build_segtree( son(<span class="number">1</span>), xI.right(), yI.left() );</span><br><span class="line">    build_segtree( son(<span class="number">2</span>), xI.left(), yI.right() );</span><br><span class="line">    build_segtree( son(<span class="number">3</span>), xI.right(), yI.right() );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点修改</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_segtree</span><span class="params">(<span class="keyword">int</span> p, Interval xI, Interval yI, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xI.len() &lt;= <span class="number">0</span> || yI.len()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!xI.in(x) || !yI.in(y) )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    treeNode *now = getNode(p);</span><br><span class="line">    <span class="keyword">if</span>(xI.len()==<span class="number">1</span> &amp;&amp; yI.len()==<span class="number">1</span>)&#123;</span><br><span class="line">        now-&gt;maxv=now-&gt;minv =dataInfo(x, y, val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isvalid[<span class="number">4</span>];</span><br><span class="line">    isvalid[<span class="number">0</span>]=insert_segtree( son(<span class="number">0</span>), xI.left(), yI.left(), x, y, val);</span><br><span class="line">    isvalid[<span class="number">1</span>]=insert_segtree( son(<span class="number">1</span>), xI.right(), yI.left(), x, y, val);</span><br><span class="line">    isvalid[<span class="number">2</span>]=insert_segtree( son(<span class="number">2</span>), xI.left(), yI.right(), x, y, val);</span><br><span class="line">    isvalid[<span class="number">3</span>]=insert_segtree( son(<span class="number">3</span>), xI.right(), yI.right(), x, y, val);</span><br><span class="line"></span><br><span class="line">    now-&gt;reset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isvalid[i]) <span class="keyword">continue</span>;<span class="comment">//只对有效的区间修改</span></span><br><span class="line">        treeNode *sonNode =getNode(son(i));</span><br><span class="line">        now-&gt;maxv=sonNode-&gt;maxv.val &gt; now-&gt;maxv.val?sonNode-&gt;maxv : now-&gt;maxv;</span><br><span class="line">        now-&gt;minv=sonNode-&gt;minv.val &lt; now-&gt;minv.val?sonNode-&gt;minv : now-&gt;minv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_segtree</span><span class="params">(<span class="keyword">int</span> p, Interval xI, Interval yI, Interval tarXI, Interval tarYI, treeNode&amp; ans)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(xI.len()&lt;=<span class="number">0</span> || yI.len()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tarXI.isIntersectWith(xI) || !tarYI.isIntersectWith(yI) )&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    treeNode *now=getNode(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans.maxv.val&gt;=now-&gt;maxv.val &amp;&amp; ans.minv.val&lt;=now-&gt;minv.val)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tarXI.isInclude(xI) &amp;&amp; tarYI.isInclude(yI))&#123;</span><br><span class="line">        ans.maxv.val=max(ans.maxv.val, now-&gt;maxv.val);</span><br><span class="line">        ans.minv.val=min(ans.minv.val, now-&gt;minv.val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    query_segtree( son(<span class="number">0</span>), xI.left(), yI.left(), tarXI, tarYI, ans );</span><br><span class="line">    query_segtree( son(<span class="number">1</span>), xI.right(), yI.left(), tarXI, tarYI, ans );</span><br><span class="line">    query_segtree( son(<span class="number">2</span>), xI.left(), yI.right(), tarXI, tarYI, ans );</span><br><span class="line">    query_segtree( son(<span class="number">3</span>), xI.right(), yI.right(), tarXI, tarYI, ans );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, tmp, cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        build_segtree(<span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n));</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">                insert_segtree(<span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n), i, j, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m, x, y, sz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++cas);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;sz);</span><br><span class="line">            Interval XI, YI;</span><br><span class="line">            XI.l=max(<span class="number">1</span>, x-sz/<span class="number">2</span>), XI.r=min(n, x+sz/<span class="number">2</span>);</span><br><span class="line">            YI.l=max(<span class="number">1</span>, y-sz/<span class="number">2</span>), YI.r=min(n, y+sz/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            treeNode ans; ans.reset();</span><br><span class="line"></span><br><span class="line">            query_segtree( <span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n), XI, YI, ans);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (ans.maxv.val+ans.minv.val)/<span class="number">2</span>);</span><br><span class="line">            insert_segtree(<span class="number">1</span>, Interval(<span class="number">1</span>, n), Interval(<span class="number">1</span>, n), x, y, (ans.maxv.val+ans.minv.val)/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是借鉴的网上的写法，因为他将各种都进行了封装，所以比较好理解。自己感觉竞赛还是简练一点比较好，下面代码是自己修改的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">810</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> son(x) (rt*4-2+x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mx, mn;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mx=INT_MIN;</span><br><span class="line">        mn=INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[(N&lt;&lt;<span class="number">2</span>)*(N&lt;&lt;<span class="number">2</span>)];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;xr || yl&gt;yr) <span class="keyword">return</span>;</span><br><span class="line">    tree[rt].reset();</span><br><span class="line">    <span class="keyword">if</span>(xl==xr&amp;&amp;yl==yr)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> midx=(xl+xr)&gt;&gt;<span class="number">1</span>, midy=(yl+yr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(son(<span class="number">0</span>), xl, midx, yl, midy);</span><br><span class="line">    build(son(<span class="number">1</span>), xl, midx, midy+<span class="number">1</span>, yr);</span><br><span class="line">    build(son(<span class="number">2</span>), midx+<span class="number">1</span>, xr, yl, midy);</span><br><span class="line">    build(son(<span class="number">3</span>), midx+<span class="number">1</span>, xr, midy+<span class="number">1</span>, yr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//push_up完全可以放在跟新里面 写起来更简洁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr)</span></span>&#123;</span><br><span class="line">    node&amp; now=tree[rt];</span><br><span class="line">    now.reset();</span><br><span class="line">    now.mx=max(now.mx, tree[son(<span class="number">0</span>)].mx);</span><br><span class="line">    now.mn=min(now.mn, tree[son(<span class="number">0</span>)].mn);</span><br><span class="line">    <span class="keyword">if</span>(yl&lt;yr)&#123;</span><br><span class="line">        now.mx=max(now.mx, tree[son(<span class="number">1</span>)].mx);</span><br><span class="line">        now.mn=min(now.mn, tree[son(<span class="number">1</span>)].mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(xl&lt;xr)&#123;</span><br><span class="line">        now.mx=max(now.mx, tree[son(<span class="number">2</span>)].mx);</span><br><span class="line">        now.mn=min(now.mn, tree[son(<span class="number">2</span>)].mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(xl&lt;xr &amp;&amp; yl&lt;yr)&#123;</span><br><span class="line">        now.mx=max(now.mx, tree[son(<span class="number">3</span>)].mx);</span><br><span class="line">        now.mn=min(now.mn, tree[son(<span class="number">3</span>)].mn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//point update</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;xr || yl&gt;yr) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    node&amp; now=tree[rt];</span><br><span class="line">    <span class="keyword">if</span>(xl==xr&amp;&amp;xl==x &amp;&amp; yl==yr&amp;&amp;yl==y)&#123;</span><br><span class="line">        now.mx=val;</span><br><span class="line">        now.mn=val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> midx=(xl+xr)&gt;&gt;<span class="number">1</span>, midy=(yl+yr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x&lt;=midx &amp;&amp; y&lt;=midy)&#123;</span><br><span class="line">        upd(son(<span class="number">0</span>), xl, midx, yl, midy, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;=midx &amp;&amp; y&gt;midy)&#123;</span><br><span class="line">        upd(son(<span class="number">1</span>), xl, midx, midy+<span class="number">1</span>, yr, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;midx &amp;&amp; y&lt;=midy)&#123;</span><br><span class="line">        upd(son(<span class="number">2</span>), midx+<span class="number">1</span>, xr, yl, midy, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        upd(son(<span class="number">3</span>), midx+<span class="number">1</span>, xr, midy+<span class="number">1</span>, yr, x, y, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    push_up(rt, xl, xr, yl, yr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//interval query</span></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> xl, <span class="keyword">int</span> xr, <span class="keyword">int</span> yl, <span class="keyword">int</span> yr, <span class="keyword">int</span> qxl, <span class="keyword">int</span> qxr, <span class="keyword">int</span> qyl, <span class="keyword">int</span> qyr)</span></span>&#123;</span><br><span class="line">    node tmp; tmp.reset();</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;xr || yl&gt;yr) <span class="keyword">return</span> tmp;</span><br><span class="line">    <span class="keyword">if</span>(xl&gt;qxr || qxl&gt;xr || yl&gt;qyr || qyl&gt;yr) <span class="keyword">return</span> tmp;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(qxl&lt;=xl &amp;&amp; xr&lt;=qxr &amp;&amp; qyl&lt;=yl &amp;&amp; yr&lt;=qyr)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> midx=(xl+xr)&gt;&gt;<span class="number">1</span>, midy=(yl+yr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    node ret; ret.reset();</span><br><span class="line">    <span class="keyword">if</span>(qxl&lt;=midx &amp;&amp; qyl&lt;=midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">0</span>), xl, midx, yl, midy, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qxl&lt;=midx &amp;&amp; qyr&gt;midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">1</span>), xl, midx, midy+<span class="number">1</span>, yr, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qxr&gt;midx &amp;&amp; qyl&lt;=midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">2</span>), midx+<span class="number">1</span>, xr, yl, midy, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qxr&gt;midx &amp;&amp; qyr&gt;midy)&#123;</span><br><span class="line">        tmp=query(son(<span class="number">3</span>), midx+<span class="number">1</span>, xr, midy+<span class="number">1</span>, yr, qxl, qxr, qyl, qyr);</span><br><span class="line">        ret.mx=max(ret.mx, tmp.mx);</span><br><span class="line">        ret.mn=min(ret.mn, tmp.mn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T, n, cas=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">                upd(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, i, j, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m, x, y, sz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++cas);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;sz);</span><br><span class="line">            <span class="keyword">int</span> qxl=max(<span class="number">1</span>, x-sz/<span class="number">2</span>), qxr=min(n, x+sz/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> qyl=max(<span class="number">1</span>, y-sz/<span class="number">2</span>), qyr=min(n, y+sz/<span class="number">2</span>);</span><br><span class="line">            node ans;</span><br><span class="line">           </span><br><span class="line">            ans=query(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, qxl, qxr, qyl, qyr);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (ans.mn + ans.mx)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            upd(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, x, y, (ans.mn+ans.mx)/<span class="number">2</span>);</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个模板是根据HDU-4819编写的。功能是用二维线段树进行&lt;/p&gt;
&lt;p&gt;二维点修改和区间查询最小者和最大值。&lt;/p&gt;
&lt;p&gt;二维线段树的思想跟一维一样，只不过一维是二分二叉树，二维&lt;/p&gt;
&lt;p&gt;是四分四叉树。具体实现看代码。&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二维线段树" scheme="https://oforyou.github.io/tags/%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4821 String --hash+map</title>
    <link href="https://oforyou.github.io/2018/10/30/HDU-4821-String-hash-map/"/>
    <id>https://oforyou.github.io/2018/10/30/HDU-4821-String-hash-map/</id>
    <published>2018-10-30T02:30:03.000Z</published>
    <updated>2018-10-30T03:27:08.605Z</updated>
    
    <content type="html"><![CDATA[<p>题意：</p><p>给上限为1e5的字符串，找出有多少长度为M*L的子串，并且该子串的M个长度为L的子串各不相同。</p><p>思路：</p><p>开始认为子串不想同的定义是每个位置的字符不相同，感觉说的有歧义。</p><blockquote><p>two strings are considered as “diversified” if they don’t have the same character for every position. </p></blockquote><p>最暴力的算法就是枚举所有长度为M*L的子串，判断hash子串是否合格。但是枚举子串是n^2的时间复杂度。可以仔细想一下，我们可以从下标1~L枚举起点，然后以这个起点用指针每次跳L步长。然后跟尺取原理似的一直保持map里的元素是M个。这样时间复杂度是O（L*n/L）,即O(n)。为什么用map去重而不用set，原因就是对于相同的我们记住它出现了几次，只有他出现的次数==0的时候才将它删去。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ull base[N], _hash[N], mul=<span class="number">37</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">hash_str</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _hash[r]-_hash[l<span class="number">-1</span>]*base[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, L;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;M, &amp;L))&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">        base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        _hash[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)&#123;</span><br><span class="line">            base[i]=base[i<span class="number">-1</span>]*mul;</span><br><span class="line">            _hash[i]=_hash[i<span class="number">-1</span>]*mul+str[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>&lt;ull, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=L; i++)&#123;<span class="comment">//enum start point</span></span><br><span class="line">            mp.clear();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; i+M*L<span class="number">-1</span>&lt;=len &amp;&amp; j+L<span class="number">-1</span>&lt;=len; j+=L)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-M*L&gt;=i)&#123;</span><br><span class="line">                    ull tmp=hash_str(j-M*L, j-M*L+L<span class="number">-1</span>);</span><br><span class="line">                    mp[tmp]--;</span><br><span class="line">                    <span class="keyword">if</span>(mp[tmp]==<span class="number">0</span>) mp.erase(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                mp[hash_str(j, j+L<span class="number">-1</span>)]++;</span><br><span class="line">                <span class="keyword">if</span>(mp.size()==M) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给上限为1e5的字符串，找出有多少长度为M*L的子串，并且该子串的M个长度为L的子串各不相同。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;开始认为子串不想同的定义是每个位置的字符不相同，感觉说的有歧义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;two str
      
    
    </summary>
    
      <category term="算法" scheme="https://oforyou.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM" scheme="https://oforyou.github.io/tags/ACM/"/>
    
      <category term="map" scheme="https://oforyou.github.io/tags/map/"/>
    
      <category term="hash" scheme="https://oforyou.github.io/tags/hash/"/>
    
  </entry>
  
</feed>
